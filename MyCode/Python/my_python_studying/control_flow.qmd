# Control Flow

Control flow is a mechanism in programming languages that controls the order of program execution. It allows programs to decide which code blocks to execute based on conditions or other factors.

In Python, common control flow structures include:

- Conditional statements (`if-else` statements)
- Loop statements (`for` loops and `while` loops)
- Jump statements (`break` statements and `continue` statements)

`if-else` statements are used to execute specific code blocks when certain conditions are met.

`for` loops and `while` loops are loop structures in Python. `for` loops are used to iterate over elements in an iterable object, while `while` loops are used to repeatedly execute a code block as long as a condition is true.

`break` statements and `continue` statements are jump statements in Python. `break` statements are used to exit a loop when a specific condition is met, while `continue` statements are used to skip the remaining part of the current iteration and move on to the next iteration when a specific condition is met.

The flexibility of control flow allows programs to perform different operations based on different conditions and requirements, enabling more complex logic and functionality.

## `if` Statement

Conditional statements allow different code blocks to be executed based on the truth or falsehood of a condition. The `if` statement is used to execute a code block when a condition is true, while the `else` statement is used to execute a code block when a condition is false.

```{python}
# Example code from A Byte of Python
number = 23
guess = int(input('Please enter an integer:'))

if guess == number:
    # New code block starts here
    print('Congratulations, you guessed it.')
    print('(But you did not win any prizes!)')
    # New code block ends here
elif guess < number:
    # Another code block
    print('No, it is a little higher than that')
    # You can do whatever you want in a code block...
else:
    print('No, it is a little lower than that')
    # You must guess higher than number to reach here

print('Done')
# This final statement will always be executed
# after the if statement is executed.
```

The knowledge points in the example code:

- The `input` function prints a string to the screen and waits for input. After the input is entered, the `input()` function returns the input as a string.
- `int` is a class, and here it is used to convert a string to an integer. If you need to convert to a float, you can use `float`.
- Indentation is used to classify statements into different code blocks. Consistent indentation should be followed.
- `if`, `elif`, and `else` statements must have a colon at the end of the logical line, followed by the corresponding code block.
- The `elif` statement combines two related `if` `else-if` `else` statements into a single `if-elif-else` statement. It can simplify the program and reduce indentation.
- It is possible to nest one `if` statement inside another `if` statement, which is called a nested `if` statement.
- `elif` and `else` statements are optional. An `if` statement can be effective with only the `if` part.

## `while` Statement

The `while` statement allows a set of statements to be repeatedly executed as long as a condition is true. The `while` statement is a type of loop statement and can include an optional `if` statement.

```{python}
# Example code from A Byte of Python
number = 23
running = True

while running:
    guess = int(input('Please enter an integer: '))

    if guess == number:
        print('Congratulations, you guessed it.')
        # This will cause the while loop to break
        running = False
    elif guess < number:
        print('No, it is a little higher than that')
    else:
        print('No, it is a little lower than that')
else:
    print('The while loop is over.')
    # You can do whatever you want in a code block...

print('Done')
```

The knowledge points in the example code:

- By setting the variable `running` to `True` before the `while` loop, the program checks if the variable `running` is `True` before executing the corresponding `while` block.
- After executing the block, the condition (i.e., the variable `running`) is checked again.
- If the condition is true, the `while` block is executed again.
- If the condition is false, the optional `else` block is executed, and then the next statement is continued.
- If a `while` loop has an `else` clause, it will always be executed unless the loop is exited using a `break` statement.
- `True` and `False` are called boolean types and can be considered as equivalents of the values 1 and 0, respectively.

## `for` Loop

The `for..in` statement is another type of loop statement that iterates over an object sequence, i.e., it iterates over each item in the sequence one by one.

At this point, a sequence can be seen as an ordered collection of items.

```{python}
# Example code from A Byte of Python
for i in range(1, 5):
    print(i)
else:
    print('The for loop is over')
```

The knowledge points in the example code are as follows:
- The built-in function `range` can generate a sequence of numbers.
- By default, the step size of `range` is 1. The third number provided to `range` will be the step size, for example, `range(1,5,2)` gives `[1,3]`. The second number (i.e., the end number) is not included.
- `range` generates only one number at a time. If you need the complete list of numbers, you need to call `list()`.
- The `else` part in a `for` loop is optional. If included, it will always be executed unless the loop is exited using the `break` statement.
- Although the example code only demonstrates a list of numbers, the `for` loop can be used with sequences composed of objects of any type.

## `break` statement

The `break` statement is called a jump statement, which can stop the execution of a loop statement even if the loop condition is not False or the sequence of items has not been fully iterated.

If a `for` or `while` loop is exited using `break`, the corresponding `else` block of the loop will not be executed.

```{python}
# Example code from A Byte of Python
while True:
    s = input('Enter something : ')
    if s == 'quit':
        break
    print('Length of the string is', len(s))
print('Done')
```

The knowledge points in the example code are as follows:
- The built-in function `len` can measure the length of an input string.
- The `break` statement can also be used with a `for` loop.

## `continue` statement

The `continue` statement is used to skip the remaining statements in the current loop block and continue with the next iteration of the loop.

```{python}
# Example code from A Byte of Python

while True:
    s = input('Enter something : ')
    if s == 'quit':
        break
    if len(s) < 3:
        print('Too small')
        continue
    print('Input is of sufficient length')
    # Do other kinds of processing here...
print('Done')
```
