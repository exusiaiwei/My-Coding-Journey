# 控制流

控制流是编程语言中用于控制程序执行顺序的机制。它允许程序根据条件或其他因素来决定执行哪些代码块。

在 Python 中，常见的控制流结构包括：

- 条件语句（`if-else` 语句）
- 循环语句（`for` 循环和 `while` 循环）
- 跳转语句（`break` 语句和 `continue` 语句）

`if-else` 语句用于在满足特定条件时执行特定的代码块。

`for` 循环和 `while` 循环是 Python 中的循环结构，`for` 循环用于遍历可迭代对象中的元素，`while` 循环用于在条件为真时重复执行代码块。

`break` 语句和 `continue` 语句是 Python 的跳转语句，`break` 语句用于在满足特定条件时结束循环，`continue` 语句用于在满足特定条件时跳过此次循环的剩余部分，直接进入下一次循环。

控制流的灵活性使得程序能够根据不同的条件和需求来执行不同的操作，从而实现更复杂的逻辑和功能。

## `if` 语句

条件语句允许根据条件的真假来执行不同的代码块。`if` 语句用于执行条件为真时的代码块，而 `else` 语句用于执行条件为假时的代码块。

```{python}
# 示例代码来源： A Byte of Python
number = 23
guess = int(input('请输入一个整数：'))

if guess == number:
    # 新的代码块从这里开始
    print('恭喜你，你猜对了。')
    print('（但你没有赢得任何奖品！）')
    # 新的代码块在这里结束
elif guess < number:
    # 另一个代码块
    print('不对，它比那个数稍微大一点')
    # 你可以在代码块中做任何你想做的事情...
else:
    print('不对，它比那个数稍微小一点')
    # 你必须猜大于number才能到达这里

print('完成')
# 这个最后的语句总是会被执行，
# 在if语句执行之后。
```

示例代码中的知识点：
- `input` 函数会将一个字符串打印到屏幕上并等待输入，在输入内容后，`input()` 函数会将输入的内容作为一个字符串返回。
- `int` 是一个类，在这里它用于将字符串转换为整数。如果需要转化为浮点数则用 `float`。
- 缩进级别用于将语句分类为不同的代码块。应当遵循一致的缩进原则。
- `if`，`elif` 和 `else` 语句在逻辑行的末尾必须有一个冒号，后面跟着对应的代码块。
- `elif` 语句是将两个相关的 `if` `else-if` `else` 合并成一个组合的 `if-elif-else` 语句。可以简化程序和缩进量。
- 可以在一个 `if` 语句里嵌套另一个 `if` 语句，这被称为嵌套的 `if` 语句。
- `elif` 和 `else` 语句是可选的。一个 `if` 可以在只有 `if` 部分的情况下生效。

## `while`语句

`while`语句允许在条件为真时重复执行一组语句。`while`语句是一种循环语句，可以包括一个可选的`if`语句。
```{python}
# 示例代码来源： A Byte of Python
number = 23
running = True

while running:
    guess = int(input('请输入一个整数 : '))

    if guess == number:
        print('恭喜你，你猜对了。')
        # 这会导致while循环中断
        running = False
    elif guess < number:
        print('不对，它比那个数稍微大一点')
    else:
        print('不对，它比那个数稍微小一点')
else:
    print('while循环结束了。')
    # 你可以在代码块中做任何你想做的事情...

print('完成')
```

示例代码中的知识点：
- 在 `while` 循环之前将变量 `running` 设置为 `True`，程序会先检查变量 `running` 是否为 `True`，然后继续执行相应的 `while` 块。
- 执行完块之后，再次检查条件（即变量 `running`）。
- 如果条件为真，则再次执行 `while` 块。
- 如果条件为假，则执行可选的 `else` 块，然后继续下一条语句。
- 如果 `while` 循环有一个 `else` 子句，除非使用 `break` 语句跳出循环，否则它总是会被执行。
- `True` 和 `False` 被称为布尔类型，可以分别视作值 1 和 0 的等价物。

## `for` 循环

`for..in` 语句是另一种循环语句，它遍历一个对象序列，即逐个遍历序列中的每个项目。

就现在的进度，序列可以被视作一个有序的项目集合。

```{python}
# 示例代码来源： A Byte of Python
for i in range(1, 5):
    print(i)
else:
    print('for循环结束')
```

示例代码中的知识点：
- 内置函数 `range` 可以生成数字序列。
- 默认情况下，`range` 的步长为 1。给 `range` 提供的第三个数字将成为步长，例如 `range(1,5,2)` 给出了 `[1,3]`。不包括第二个数字（即结尾数字）。
- `range` 一次只生成一个数字，如果需要完整的数字列表需要调用 `list()`。
- `for` 循环中的 `else` 部分是可选的。若包含，除非使用 `break` 语句跳出循环，否则它总是会被执行。
- 尽管示例代码仅演示了数字列表，但 `for` 循环适用于任何类型的对象构成的序列。

## `break` 语句

`break` 语句被称为跳转语句，可以停止执行循环语句，即使循环条件尚未为 False 或者项的序列尚未完全迭代完成。

如果跳出一个 `for` 或 `while` 循环，相应的循环 `else` 块不会被执行。

```{python}
# 示例代码来源： A Byte of Python
while True:
    s = input('输入点什么: ')
    if s == '退出':
        break
    print('字符串的长度是', len(s))
print('完成')
```

示例代码中的知识点：
- 内置的 `len` 函数可以测量输入字符串的长度。
- `break` 语句也可以与 `for` 循环一起使用。

## `continue` 语句

`continue` 语句用于跳过当前循环块中的其余语句，并继续下一次循环的迭代。

```{python}
# 示例代码来源： A Byte of Python

while True:
    s = input('输入点什么: ')
    if s == '退出':
        break
    if len(s) < 3:
        print('太短了')
        continue
    print('输入长度足够')
    # 你可以在代码块中做任何你想做的事情...
print('完成')
```
